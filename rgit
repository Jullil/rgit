#!/bin/bash

SBLUE=$(tput setf 1)
SGREEN=$(tput setf 2)
SCYAN=$(tput setf 3)
SRED=$(tput setf 4)
SMAGENTA=$(tput setf 5)
SYELLOW=$(tput setf 6)
SWHITE=$(tput setf 7)
SBOLD=$(tput bold)
SUNDERLINE=$(tput smul)
SRESET=$(tput sgr0)
STOEND=$(tput hpa $(tput cols))$(tput cub 6)


SCRIPT_PATH=$(cd $(dirname $0) && pwd)
CUR_PATH=`pwd`;

function print_help() {
	case $1 in
		"start-task" | "pull")
			echo "Usage: grit start-task|st <branch_name> [-d <repository_name>]"
			echo "Params:"
			echo "  -d    Call the command for certain repositories"
		;;
		*)
			echo "Usage: grit <command> [<args>] [-d <repository_name>]"
			echo "Commands:"
			echo "  pull|push|clone|...  Any git command"
			echo "  prepare|pr           Clone repository and fetch branches if it doesn\'t exist"
			echo "  start-task|st        Switch to master or develop branch. Fetch changes. Create and checkout to new branch."
			echo "  finish-task|ft       Switch to branch. Commit and push changes to remote branch. Switch to master or develop branch."
			echo "Params:"
			echo "  -d                   Call the command for certain repositories"
		;;
	esac
}

function fetch_modules() {
    echo "Get all modules"
    _file="${CUR_PATH}/repository_list"

    _num=0
    while read _line
    do
		_module_name=`echo $_line | head -n1 | awk '{print $1;}'`
		if [ -z $selected_module_name ]
		then
			module_list[$_num]="${_line[@]}"
			_num=$(($_num+1))
		else
			if [ $selected_module_name = $_module_name ]
			then
				module_list[$_num]=${_line[*]}
				_num=$(($_num+1))
			fi
		fi
    done < $_file
}

source $SCRIPT_PATH/commands/git_command
source $SCRIPT_PATH/commands/prepare
source $SCRIPT_PATH/commands/start_task
source $SCRIPT_PATH/commands/finish_task

function exec_command() {
	_command_name=$1
	shift
	_command_args=($*)
	
	_module_name=$1
	_module_path=$2
	
	_dir="${CUR_PATH}/${_module_path}"

	_command_args[1]=$_dir
	
    case $_command_name in
        "pr" | "prepare")
            echo "${SYELLOW}Prepare module \"${_module_name}\"${SRESET}"
            prepare ${_command_args[*]}
        ;;
        "st" | "start-task")
            echo "${SYELLOW}Start new task for module \"${_module_name}\"${SRESET}"
            start_task ${_command_args[*]}
        ;;
        "ft" | "finish-task")
            echo "${SYELLOW}Finish task for module \"${_module_name}\"${SRESET}"
            finish_task ${_command_args[*]}
        ;;
        *)
            echo "${SYELLOW}Git command \"${_command_name}\" for module \"${_module_name}\"${SRESET}"
            git_command ${_command_name} ${_command_args[*]}
        ;;
    esac
}

if [ -z $1 ]
then
	echo -n "${SRED}Command not found${SRESET}"
	echo "${SRED}${STOEND}[fail]${SRESET}"
	print_help
else
	_operation=$1
	shift
	
	_arg_num=0
	while [ $# != "0" ]
	do 
		case $1 in
			"-d")
				selected_module_name=$2
				shift
			;;
			*)
				_arguments[$_arg_num]=$1
				_arg_num=$(($_arg_num+1))
		esac  
		  
		shift
	done

	# Fetch information about modules
	fetch_modules

	for  ((_i=0; _i<${#module_list[@]}; _i++))
	do
		echo '---------------------------------------------------------'
		_module_data=(${module_list[$_i]})
		exec_command $_operation ${_module_data[*]} ${_arguments[*]}
	done
fi




